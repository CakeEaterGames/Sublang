!include "libs/includes.txt"


function newArray(len,out){
	set(newArray+5, cb)
	set(newArray+6, len)

	jump(newArray)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _newArray()
{
	jump(skipVars)
		ret: jump(0),
		len: 0,
		loc: 0,
	skipVars:

	malloc(len,loc)
	clearArea(loc,len)
	set(_return1,loc)

	jump(ret)
}



function arrayGet(arr,index,out){
	set(arrayGet+5, cb)
	set(arrayGet+6, arr)
	set(arrayGet+7, index)

	jump(arrayGet)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _arrayGet()
{
	jump(skipVars)
		ret: jump(0),
		arr: 0,
		index: 0,
		ptr: 0,
		val: 0,
	skipVars:

	add(arr,index,ptr)
	memGet(ptr,val)
	set(_return1,val)

	jump(ret)
}


function arraySet(arr,index,val){
	set(arraySet+5, cb)
	set(arraySet+6, arr)
	set(arraySet+7, index)
	set(arraySet+8, val)


	jump(arraySet)
	cb: comeback,
	comeback:

}

function _arraySet()
{
	jump(skipVars)
		ret: jump(0),
		arr: 0,
		index: 0,
		val: 0,
		ptr: 0,
	skipVars:

	add(arr,index,ptr)
	memSet(ptr,val)

	jump(ret)
}

function main()
{
	jump(skipFuncs)
		writeInt:  _writeInt(),
		writeStr:  _writeStr(),
		mul:       _mul(),
		div:       _div(),
		geti:      _geti(),
		seti:      _seti(),
		memGet:    _memGet(),
		memSet:    _memSet(),
		rngNext:   _rngNext(),
		rngNext2:  _rngNext2(),
		copyArea:  _copyArea(),
		clearArea: _clearArea(),
		readLine:  _readLine(),
		malloc:    _malloc(),
		free:      _free(),
		newArray:  _newArray(),
		arrayGet:  _arrayGet(),
		arraySet:  _arraySet(),
	skipFuncs:
	
	!var arr 0
	!var p10 10
	!var p0 0
	!var p1 1
	!var p2 2
	!var p3 3
	!var p4 4
	!var p5 5


	newArray(p10,arr)

	arraySet(arr,p0,p0)
	arraySet(arr,p1,p1)
	arraySet(arr,p2,p2)

	!var val 0
	
	arrayGet(arr,p0,val)
	writelnInt(val)
	arrayGet(arr,p1,val)
	writelnInt(val)
	arrayGet(arr,p2,val)
	writelnInt(val)

	free(arr)



	writeln()




	//split(stringPtr,sep,outArray)
	//To split a string by a separator, first count how many separators are in that string
	//Just loop through and count
	//Create an array of that length
	//Count the chars from start of a string untill separator
	//Create a string(array?) of that length
	//copy area from start of string to separator to new string
	//append string pointer to array
	//move the start of a string further
	//repeat untill the end of string


	//newListNode(val,out)
	//creates a structure {val:a, next:zero}

	//newListNode(p1,a)
	//newListNode(p2,b)
	//newListNode(p3,c)
	//linkNodes(a,b)
	//linkNodes(b,c)




	newArray(p10,arr)

	 	
	arraySet(arr,p0,p3)
	arraySet(arr,p1,p4)
	arraySet(arr,p2,p5)

	!var val 0
		
	arrayGet(arr,p0,val)
	writelnInt(val)
	arrayGet(arr,p1,val)
	writelnInt(val)
	arrayGet(arr,p2,val)
	writelnInt(val)
 



	//list(arr)
	//listAdd(arr,a)
	//listAdd(arr,b)
	//listAdd(arr,c)
	//listGet(arr,p2,a)
	//free(arr)

	//string(s,l)
	//split(s,nl,arr)
	//arrayGet(arr,p0,a)
	//writeStr(a)

	jump(-1)
	
	!vars_location
	
	!include "libs/input_buffer.txt"
	!include "libs/heap_vars.txt"
 
	_stack: _mainStack,
	_mainStack: 0,
	!zeroes 250
} 
