
//Equivalent to out = addr[offset]
function geti(addr, offset, out){
	set(geti+5, cb)
	set(geti+6, addr)
	set(geti+7, offset)

	jump(geti)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _geti()
{
	jump(skipVars)
		ret: jump(0),
		addr: 0,
		offset: 0,
		temp: 0,
	skipVars:
 
	clear(getpart)
	clear(temp)
	sub(temp, addr)
	sub(temp, offset)
	sub(getpart, temp)

	clear(_return1)
	clear(temp)

	getpart:
	sub(temp, 0)
	sub(_return1, temp)
 

	jump(ret)
}

//Equivalent to addr[offset] = val
function seti(addr, offset, val){
	set(seti+5, cb)
	set(seti+6, addr)
	set(seti+7, offset)
	set(seti+8, val)

	jump(seti)
	cb: comeback,
	comeback:
 
}

function _seti()
{
	jump(skipVars)
		ret: jump(0),
		addr: 0,
		offset: 0,
		val: 0,
		temp: 0,
	skipVars:

	clear(temp)
	sub(temp, addr)
	sub(temp, offset)
		
	clear(clearpart)
	sub(clearpart,temp)

	clear(clearpart+1)
	sub(clearpart+1,temp)

	clear(setpart+1)
	sub(setpart+1, temp)
	 
	clear(temp)
	sub(temp,val)

	clearpart:
	sub(0, 0)
	setpart:
	sub(0, temp)


	jump(ret)
}




//Access the main memory of the program
//Equivalent to out = code[ptr]

function memGet(ptr,out){
	set(memGet+5, cb)
	set(memGet+6, ptr)

	jump(memGet)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _memGet()
{
	jump(skipVars)
		ret: jump(0),
		ptr: 0,
		t: 0,
	skipVars:

	clear(t)
	set(here,ptr)

	here:
	subleq(0,t)
	clear(_return1)
	sub(_return1,t)

	jump(ret)
}

//Access the main memory of the program
//Equivalent to code[ptr] = val

function memSet(ptr,val){
	set(memSet+5, cb)
	set(memSet+6, ptr)
	set(memSet+7, val)

	jump(memSet)
	cb: comeback,
	comeback:
}

function _memSet()
{
	jump(skipVars)
		ret: jump(0),
		ptr: 0,
		a: 0,
		t: 0,
	skipVars:

	set(clr,ptr)
	set(clr+1,ptr)
	set(here+1,ptr)

	clr:
	subleq(0,0)
	
	clear(t)
	sub(t,a)

	here:
	subleq(t,0)

	jump(ret)
}



function push(stack,val)
{
	inc(stack)
	seti(stack,zero,val)
}
function pop(stack,val)
{
	geti(stack,zero,val)
	dec(stack)
}
function push(val)
{
	push(_stack,val)
}
function pop(val)
{
	pop(_stack,val)
}


function copyArea(start,len,dest)
{
	set(copyArea+5, cb)
	set(copyArea+6, start)
	set(copyArea+7, len)
	set(copyArea+8, dest)

	jump(copyArea)
	cb: comeback,
	comeback:
}

function _copyArea()
{
	jump(skipVars)
		ret: jump(0),
		start: 0,
		len: 0,
		dest: 0,
		temp: 0,
		i:0,
	skipVars:
	
	set(getPart,start)
	set(clearPart,dest)
	set(clearPart+1,dest)
	set(setPart+1,dest)
	
	clear(i)
	sub(i,len)
	inc(i)

	loop:
		clear(temp)

		getPart:
		sub(temp,0)
	
		clearPart:
		clear(0)
	
		setPart:
		sub(0,temp)
	
		inc(getPart)
		inc(clearPart)
		inc(clearPart+1)
		inc(setPart+1)
	incJump(i,loop)

	jump(ret)
}


function clearArea(start,len)
{
	set(clearArea+5, cb)
	set(clearArea+6, start)
	set(clearArea+7, len)

	jump(clearArea)
	cb: comeback,
	comeback:
}

function _clearArea()
{
	jump(skipVars)
		ret: jump(0),
		start: 0,
		len: 0,
		i:0,
	skipVars:
	
	set(clearPart,start)
	set(clearPart+1,start)
	
	clear(i)
	sub(i,len)
	inc(i)

	loop:	
		clearPart:
		clear(0)
 
		inc(clearPart)
		inc(clearPart+1)
	incJump(i,loop)

	jump(ret)
}

function fillArea(start,len,val)
{
	set(fillArea+5, cb)
	set(fillArea+6, start)
	set(fillArea+7, len)
	set(fillArea+8, val)

	jump(fillArea)
	cb: comeback,
	comeback:
}

function _fillArea()
{
	jump(skipVars)
		ret: jump(0),
		start: 0,
		len: 0,
		tval: 0,
		val: 0,
		i:0,
	skipVars:
	
	clear(val)
	sub(val,tval)

	set(clearPart,start)
	set(clearPart+1,start)
	//set(setPart,val)
	set(setPart+1,start)

	clear(i)
	sub(i,len)
	inc(i)

	loop:	
		clearPart:
		subleq(0,0)
		setPart:
		subleq(val,0)

		inc(clearPart)
		inc(clearPart+1)
		inc(setPart+1)
	incJump(i,loop)

	jump(ret)
}

function newArray(len,out){
	set(newArray+5, cb)
	set(newArray+6, len)

	jump(newArray)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _newArray()
{
	jump(skipVars)
		ret: jump(0),
		len: 0,
		loc: 0,
	skipVars:

	malloc(len,loc)
	clearArea(loc,len)
	set(_return1,loc)

	jump(ret)
}



function arrayGet(arr,index,out){
	set(arrayGet+5, cb)
	set(arrayGet+6, arr)
	set(arrayGet+7, index)

	jump(arrayGet)
	cb: comeback,
	comeback:
	set(out,_return1)
}

function _arrayGet()
{
	jump(skipVars)
		ret: jump(0),
		arr: 0,
		index: 0,
		ptr: 0,
		val: 0,
	skipVars:

	add(arr,index,ptr)
	memGet(ptr,val)
	set(_return1,val)

	jump(ret)
}


function arraySet(arr,index,val){
	set(arraySet+5, cb)
	set(arraySet+6, arr)
	set(arraySet+7, index)
	set(arraySet+8, val)


	jump(arraySet)
	cb: comeback,
	comeback:

}

function _arraySet()
{
	jump(skipVars)
		ret: jump(0),
		arr: 0,
		index: 0,
		val: 0,
		ptr: 0,
	skipVars:

	add(arr,index,ptr)
	memSet(ptr,val)

	jump(ret)
}