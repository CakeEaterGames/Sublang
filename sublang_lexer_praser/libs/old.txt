

//Equivalent to out = addr[offset]
function geti(addr, offset, out)
{
	!var getiTemp 0

	clear(getpart)
	clear(getiTemp)
	sub(getiTemp, default_val)
	sub(getiTemp, offset)
	sub(getpart, getiTemp)

	clear(out)
	clear(getiTemp)

	getpart:
	sub(getiTemp, addr)
	sub(out, getiTemp)
	
	jump(skip)
		default_val: addr,
	skip:
}

//Equivalent to addr[offset] = val
function seti(addr, offset, val)
{
	!var setiTemp 0
	
	clear(setiTemp)
	sub(setiTemp, default_val)
	sub(setiTemp, offset)
		
	clear(clearpart)
	sub(clearpart,setiTemp)

	clear(clearpart+1)
	sub(clearpart+1,setiTemp)

	clear(setpart+1)
	sub(setpart+1, setiTemp)
	 
	clear(setiTemp)
	sub(setiTemp,val)

	clearpart:
	sub(addr, addr)
	setpart:
	sub(addr, setiTemp)
 	
	jump(skip)
		default_val: addr,
	skip:
}


function writeInt(a)
{
	jump(skipLocals),
		num: 0,
		count: 0,
	skipLocals:
	
	!var char0 48
	!var charMinus 45

	set(num,a)

	ifeq0(num,else1)
		write(char0)
		jump(endWrite)
	else1:

	iflt0(num,else2)
		write(charMinus)
		neg(num)
	else2:

	!var p1 1
	!var p10 10
	!var p100 100
	!var p1000 1000
	!var p10000 10000
	!var p100000 100000
	!var p1000000 1000000
	!var p10000000 10000000
	!var p100000000 100000000
	!var p1000000000 1000000000
 
	jgte(num,p1000000000, d10)
	jgte(num,p100000000, d9)
	jgte(num,p10000000, d8)
	jgte(num,p1000000, d7)
	jgte(num,p100000, d6)
	jgte(num,p10000, d5)
	jgte(num,p1000, d4)
	jgte(num,p100, d3)
	jgte(num,p10, d2)
	jump(d1)

	d10:
	_writeInt(p1000000000)
	d9:
	_writeInt(p100000000)
	d8:
	_writeInt(p10000000)
	d7:
	_writeInt(p1000000)
	d6:
	_writeInt(p100000)
	d5:
	_writeInt(p10000)
	d4:
	_writeInt(p1000)
	d3:
	_writeInt(p100)
	d2:
	_writeInt(p10)
	d1:
	_writeInt(p1)


	endWrite:
}

function _writeInt(pp){
	set(count,char0)
	loop:
		jlt(num,pp,endLoop)
		inc(count)
		sub(num,pp)
		jump(loop)
	endLoop:
	write(count)
}

function testDivOld()
{
	!var i -5
	!var j -5
	!var t 0
	!var t2 0
	!var from -5
	!var to 5
	!var charMul 42
	!var charDiv 47
	!var equals 61
	!var charOpenr 40
	!var charCloser 41


	set(i,from)
	loop1:
	iflte(i,to,else1)
		set(j,from)
		loop2:
		iflte(j,to,else2)
			writespInt(i)
			writesp(charDiv)
			writespInt(j)
			writesp(equals)
			div(i,j,t,t2)
			writespInt(t)
			write(charOpenr)
			writeInt(t2)
			write(charCloser)

			writelnp()
		inc(j)
		jump(loop2)
		else2:
	inc(i)
	jump(loop1)
	else1:


}

function testMulOld()
{
	!var i -5
	!var j -5
	!var t 0
	!var from -5
	!var to 5
	!var charMul 42
	!var equals 61

	set(i,from)
	loop1:
	iflte(i,to,else1)
		set(j,from)
		loop2:
		iflte(j,to,else2)
			writespInt(i)
			writesp(charMul)
			writespInt(j)
			writesp(equals)
			mul(i,j,t)
			writeInt(t)
			writelnp()
		inc(j)
		jump(loop2)
		else2:
	inc(i)
	jump(loop1)
	else1:
}

function push(par1,par2){
	set(push+5, cb)
	set(push+6, par1)
	set(push+7, par2)

	jump(push)
	cb: comeback,
	comeback:
}

 

function _push()
{
	jump(skipVars)
		ret: jump(0),
		stack: 0,
		val: 0,
		stackLen: 0,
		t:0,
	skipVars:

	set(getLenPart,stack)
	getLenPart:
	sub(t,0)
	sub(stackLen,t)



	jump(ret)
}

 