
function sub(a,b)
{
	b,a,?+1
}

function sub(a,b,c)
{
	!var temp 0

	clear(temp)
	sub(temp,a)
		
	//c=--a-b
	clear(c)
	sub(c,temp)
	sub(c,b)
}

function set(a, b)
{
	!var temp 0
    clear(a)
    clear(temp)
    sub(temp, b)
    sub(a, temp)
}

function add(a, b, c)
{
	!var temp 0

    clear(temp)
    sub(temp, a)
    sub(temp, b)

    clear(c)
    sub(c, temp)
}

function add(a, b)
{
	!var temp 0
	
    //clear(temp)
    //sub(temp, a)
    //sub(temp, b)
    //clear(a)
    //sub(a, temp)

	clear(temp)
    sub(temp, b)
	sub(a, temp)
}

function neg(a,b)
{
	clear(a)
	sub(b,a)
}


function neg(a)
{
    !var temp 0
	!var temp2 0

	clear(temp)
	clear(temp2)

	sub(temp,a)
	sub(temp2,temp)

	clear(a)
	sub(a,temp2)
}


function inc(a)
{
	!var n1 -1
	sub(a,n1)
}

function dec(a)
{
	!var p1 1
	sub(a,p1)
}

//Adds 1 to i. While i>=0 gotoLabel
function incJump(i,label)
{
	!var n1 -1
	busleq(i,n1,label)
}

function swap(a,b)
{
	!var swapt1 0
	!var swapt2 0

	clear(swapt1)
	clear(swapt2)

	sub(swapt1,a)
	sub(swapt2,b)

	clear(a)
	clear(b)
	
	sub(a,swapt2)
	sub(b,swapt1)
}

function mul(par1,par2)
{
	mul(par1,par2,par1)
}

function mul(par1,par2,ret1)
{
	set(mul+5, cb)
	set(mul+6, par1)
	set(mul+7, par2)

	!var _return1 0

	jump(mul)
	cb: comeback,
	comeback:
	set(ret1,_return1)
}
function _mul()
{
	jump(skipVars)
		ret: jump(0),
		a: 0,
		b: 0,
		temp: 0,
		sum: 0,
		neg: 0,
	skipVars:

	clear(neg)
	clear(sum)

	!var zero 0
	!var _return1 0

	ifeq0(a,else1)
		set(_return1,zero)
		jump(ret)
	else1:
		
	ifeq0(b,else2)
		set(_return1,zero)
		jump(ret)
	else2:

	iflt0(a,else3)
		inc(neg)
		neg(a)
	else3:

	iflt0(b,else4)
		inc(neg)
		neg(b)
	else4:


	ifgt(a,b,else5)
		swap(a,b)
	else5:

	//	now a <= b

	neg(a)
	inc(a)

	loop:
		sub(sum,b)
	incJump(a,loop)

	ifeq(neg,p1,else6)
		set(_return1,sum)
		jump(ret)
	else6:
		clear(_return1)
		sub(_return1,sum)
		jump(ret)
}


function div(a,b,d,m)
{
	set(div+5, cb)
	set(div+6, a)
	set(div+7, b)

	jump(div)
	cb: comeback,
	comeback:
	set(d,_return1)
	set(m,_return2)
}
function div(a,b,d)
{
	set(div+5, cb)
	set(div+6, a)
	set(div+7, b)

	jump(div)
	cb: comeback,
	comeback:
	set(d,_return1)
}
function div(a,b)
{
	set(div+5, cb)
	set(div+6, a)
	set(div+7, b)

	jump(div)
	cb: comeback,
	comeback:
	set(a,_return1)
}

function toBin(val, save){
	set(toBin+5, cb)
	set(toBin+6, val)
	set(toBin+7, save)

	jump(toBin)
	cb: comeback,
	comeback:
}

function binHelp(val,pow,save)
{
	!var binTemp 0
	clear(binTemp)
	ifgte(val,pow,else)
		inc(binTemp)
		sub(val,pow)
	else:

	memSet(save,binTemp)
	inc(save)

}

function _toBin()
{
	jump(skipVars)
		ret: jump(0),
		val: 0,
		save: 0,
	skipVars:

	binHelp(val,#1073741824,save)
	binHelp(val,#536870912,save)
	binHelp(val,#268435456,save)
	binHelp(val,#134217728,save)
	binHelp(val,#67108864,save)
	binHelp(val,#33554432,save)
	binHelp(val,#16777216,save)
	binHelp(val,#8388608,save)
	binHelp(val,#4194304,save)
	binHelp(val,#2097152,save)
	binHelp(val,#1048576,save)
	binHelp(val,#524288,save)
	binHelp(val,#262144,save)
	binHelp(val,#131072,save)
	binHelp(val,#65536,save)
	binHelp(val,#32768,save)
	binHelp(val,#16384,save)
	binHelp(val,#8192,save)
	binHelp(val,#4096,save)
	binHelp(val,#2048,save)
	binHelp(val,#1024,save)
	binHelp(val,#512,save)
	binHelp(val,#256,save)
	binHelp(val,#128,save)
	binHelp(val,#64,save)
	binHelp(val,#32,save)
	binHelp(val,#16,save)
	binHelp(val,#8,save)
	binHelp(val,#4,save)
	binHelp(val,#2,save)
	binHelp(val,#1,save)

	jump(ret)
}

function writeBin(addr){
	set(writeBin+5, cb)
	set(writeBin+6, addr)

	jump(writeBin)
	cb: comeback,
	comeback:
}

function _writeBin()
{
	jump(skipVars)
		ret: jump(0),
		a: 0,
		i: -30,
		t:0,
	skipVars:

	set(loop,a)

	loop:
		subleq(9999,t)
		inc(loop)
		neg(t)
		add(t,#48)
		write(t)
		clear(t)
	subleq(#-1,i,loop)

	writeln()
	jump(ret)
}

function mul2(a)
{
	!var temp 0
	clear(temp)
	sub(temp,a)
	sub(temp,a)
	clear(a)
	sub(a,temp)
}


function _div()
{
	jump(skipVars)
		ret: jump(0),
		a: 0,
		b: 0,
		c: 0,
		neg: 0,
		neg1: 0,
		ptr: 0, 
		digits: _digits,
		_digits: !zeroes 32,
		bin: 0,
		res:0,
		i:0,
		t:0,
	skipVars:

	!var inf 2147483647
	!var _return1 0
	!var _return2 0

	clear(c)
	clear(neg)
	clear(neg1)

	ifeq0(a,else1)
		set(_return1,zero)
		jump(else5)
	else1:
		
	ifeq0(b,else2)
		clear(a)
		set(c,inf)
		jump(else5)
	else2:

	iflt0(a,else3)
		inc(neg)
		inc(neg1)
		neg(a)
	else3:

	iflt0(b,else4)
		inc(neg)
		neg(b)
	else4:

	toBin(a,digits)

	set(ptr,digits)
	set(i,#-30)
	clear(bin)
	clear(res)


	//add digit to bin
	//If bin>b inc res; bin-=b
	//bin*=2
	//res*=2

	loop:
		mul2(bin)
	    mul2(res)
	    memGet(ptr,t)
	    inc(ptr)
	    add(bin,t)
	    ifgte(bin,b,sk)
			inc(res)
			sub(bin,b)
	    sk:
	subleq(#-1,i,loop)

	set(c,res)
	set(a,bin)



	else5:

	ifeq(neg1,p1,else7)
		clear(_return2)
		sub(_return2,a)
	jump(end7)
	else7:
		set(_return2,a)
	end7:

	ifeq(neg,p1,else6)
		clear(_return1)
		sub(_return1,c)
		jump(ret)
	else6:
		set(_return1,c)
		jump(ret)
 
	jump(ret)
}



function max(a,b,c)
{
	ifgt(a,b,else)
		set(c,a)
		jump(end)
	else:
		set(c,b)
	end:
}


function min(a,b,c)
{
	ifgt(a,b,else)
		set(c,b)
		jump(end)
	else:
		set(c,a)
	end:
}