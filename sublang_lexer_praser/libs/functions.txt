//These are used for recursive functions only.
//It isn't nessesary to push return pointers onto the stack if you don't call the function inside of itself

function call(func)
{
	push(cb)
	jump(func)
	
	cb: comeback,
	comeback:
}
function call(func, par1)
{
    !var _param1 0

	set(_param1,par1)
	call(func)
}
function call(func, par1, par2)
{
    !var _param1 0
    !var _param2 0

	set(_param1,par1)
	set(_param2,par2)
	call(func)
}
function call(func, par1, par2, par3)
{
    !var _param1 0
    !var _param2 0
    !var _param3 0

	set(_param1,par1)
	set(_param2,par2)
	set(_param3,par3)
	call(func)
}
 
//  Add more if needed

function return()
{
	pop(jump+2)
	jump:
	jump(0)
}
function return(val1)
{
	!var _return1 0

	set(_return1,val1)
    return()
}
function return(val1,val2)
{
	!var _return1 0
	!var _return2 0

	set(_return1,val1)
    set(_return2,val2)
    return()
}

//  Add more if needed



//	These are examples for non recursive functions

function functionName(par1){
	set(functionPointer+5, cb)
	set(functionPointer+6, par1)

	jump(functionPointer)
	cb: comeback,
	comeback:
}

function _functionName()
{
	jump(skipVars)
		ret: jump(0),
		a: 0,
	skipVars:

	//Your code here
	//a will be set to par1

	jump(ret)
}